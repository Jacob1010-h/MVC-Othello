package src.name.jacobh.mvc;
import com.mrjaffesclass.apcs.messenger.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.util.Arrays;
import java.util.Objects;

/**
 * MVC Template
 * This is a template of an MVC framework used by APCS for the 
 * LandMine project (and others)
 * @author Roger Jaffe
 * @version 1.0
 *
 */
public class View extends JFrame implements MessageHandler {

    private final Messenger mvcMessaging;
    JPanel mvcOthello;
    JRadioButton _00;
    JRadioButton _01;
    JRadioButton _02;
    JRadioButton _03;
    JRadioButton _04;
    JRadioButton _05;
    JRadioButton _06;
    JRadioButton _07;
    JRadioButton _10;
    JRadioButton _11;
    JRadioButton _12;
    JRadioButton _13;
    JRadioButton _14;
    JRadioButton _15;
    JRadioButton _16;
    JRadioButton _17;
    JRadioButton _20;
    JRadioButton _21;
    JRadioButton _22;
    JRadioButton _23;
    JRadioButton _24;
    JRadioButton _25;
    JRadioButton _26;
    JRadioButton _27;
    JRadioButton _30;
    JRadioButton _31;
    JRadioButton _32;
    JRadioButton _33;
    JRadioButton _34;
    JRadioButton _35;
    JRadioButton _36;
    JRadioButton _37;
    JRadioButton _40;
    JRadioButton _41;
    JRadioButton _42;
    JRadioButton _43;
    JRadioButton _44;
    JRadioButton _45;
    JRadioButton _46;
    JRadioButton _47;
    JRadioButton _50;
    JRadioButton _51;
    JRadioButton _52;
    JRadioButton _53;
    JRadioButton _54;
    JRadioButton _55;
    JRadioButton _56;
    JRadioButton _57;
    JRadioButton _60;
    JRadioButton _61;
    JRadioButton _62;
    JRadioButton _63;
    JRadioButton _64;
    JRadioButton _65;
    JRadioButton _66;
    JRadioButton _67;
    JRadioButton _70;
    JRadioButton _71;
    JRadioButton _72;
    JRadioButton _73;
    JRadioButton _74;
    JRadioButton _75;
    JRadioButton _76;
    JRadioButton _77;

    /**
     * Creates a new view
     * @param messages mvcMessaging object
     */
    public View(Messenger messages) {
        mvcMessaging = messages;   // Save the calling controller instance
        initComponents();           // Create and init the GUI components
    }

    /**
     * Initialize the model here and subscribe
     * to any required messages
     */
    public void init() {
        // Subscribe to messages here
        mvcMessaging.subscribe("model:variable1Changed", this);
        mvcMessaging.subscribe("model:variable2Changed", this);
        mvcMessaging.subscribe("view:buttonClicked", this);
        loadGame();
        addListeners();
    }

    private void loadGame() {
        // set the 4 center incon of the buttons to the starting configuration of the othello board
    }

    @Override
    public void messageHandler(String messageName, Object messagePayload) {
        if (messagePayload != null) {
            System.out.println("MSG: received by view: "+messageName+" | "+ messagePayload);
        } else {
            System.out.println("MSG: received by view: "+messageName+" | No data sent");
        }
        assert messagePayload != null;
        if (messageName.equals("model:variable1Changed")) {
//            jLabel8.setText(messagePayload.toString());
        } else {
//            jLabel10.setText(messagePayload.toString());
        }
    }

    /**
     * Instantiate an object with the field number that was clicked (1 or 2) and
     * the direction that the number should go (up or down)
     * @param fieldNumber 1 or 2 for the field being modified
     * @param direction this.UP (1) or this.DOWN (-1), constants defined above
     * @return the HashMap payload to be sent with the message
     */
    private MessagePayload createPayload(int fieldNumber, int direction) {
        return new MessagePayload(fieldNumber, direction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("MVC Othello");
        setSize(530, 485);
        setContentPane(mvcOthello);


    }

    /**
     * This method is to add action listeners to the buttons
     */
    private void addListeners() {
        Icon blackIcon = new ImageIcon("src/name/jacobh/rescources/black_circle.png");
        Icon whiteIcon = new ImageIcon("src/name/jacobh/rescources/white_circle.png");

        Arrays.stream(mvcOthello.getComponents())
                .filter(c -> c instanceof JRadioButton)
                .forEach(c -> ((JRadioButton) c).addActionListener(e -> {
                    ((JRadioButton) c).setIcon(
                            // If the icon is nothing, set it to black
                            // If the icon is black, set it to white
                            // If the icon is white, set it to black
                            ((JRadioButton) c).getIcon() == null ? blackIcon :
                                    Objects.equals(((JRadioButton) c).getIcon(), blackIcon) ? whiteIcon : blackIcon
                    );
                    mvcMessaging.notify("view:buttonClicked", "Icon changed to: " + ((JRadioButton) c).getIcon());
                }));
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}